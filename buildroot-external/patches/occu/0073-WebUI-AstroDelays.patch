--- occu/WebUI/www/rega/esp/system.fn.orig
+++ occu/WebUI/www/rega/esp/system.fn
@@ -963,7 +963,9 @@
     sCI=sCI#"Try to set SunOffsetType to ["#system.GetVar("tmSot")#"] ";
     tmObj.SunOffsetType( system.GetVar("tmSot") );
     if( tmObj.SunOffsetType() == system.GetVar("tmSot") ) { sCI=sCI#"OK, "; } else { sCI=sCI#"FAILED, "; }
-    
+
+    if( tmObj.SunOffsetType() != sotNone ) { tmObj.TimeSeconds( system.GetVar("tmTime") ); }
+
     Write( 'dlgResult = '#tmObj.ID()#';' );
     Write( 'PopupClose();' );
   }
@@ -1019,17 +1021,21 @@
         sTm = sTm # s.Format("%H:%M") # " ${ruleConditionLblTimeClock} ";
       }
     }
-    if (tm.SunOffsetType() == sotAfterSunrise)
+    elseif ((tm.SunOffsetType() == sotSunrise) ||
+            (tm.SunOffsetType() == sotBeforeSunrise) ||
+            (tm.SunOffsetType() == sotAfterSunrise))
     {
       !sTm = sTm # "tags√ºber ";
       sTm = sTm # "${ruleConditionLblTimeDuringDay} ";
     }
-    if (tm.SunOffsetType() == sotAfterSunset)
+    elseif ((tm.SunOffsetType() == sotSunset) ||
+            (tm.SunOffsetType() == sotBeforeSunset) ||
+            (tm.SunOffsetType() == sotAfterSunset))
     {
       !sTm = sTm # "nachts ";
       sTm = sTm # "${ruleConditionLblTimeDuringNight} ";
     }
-    if (tm.CalDuration() != 0) {
+    elseif (tm.CalDuration() != 0) {
       sTm = sTm # "${lblTo} ";
       sTm = sTm # (tm.TimeSeconds() + tm.CalDuration()).ToTime().Format("%H:%M");
       sTm = sTm # " ${ruleConditionLblTimeClock} ";
--- occu/WebUI/www/rega/pages/tabs/admin/msg/timemodule.htm.orig
+++ occu/WebUI/www/rega/pages/tabs/admin/msg/timemodule.htm
@@ -90,12 +90,11 @@
     </tr>
     <tr>
     <td></td>
-    <td colspan="2">
+    <td colspan="3">
       <input type="radio" name="timespan" id="tsDay" />${timeModuleLblAllDay}<br />
-      <input type="radio" name="timespan" id="tsDaytime" />${timeModuleLblAstroDay}<br />
-      <input type="radio" name="timespan" id="tsNighttime" />${timeModuleLblAstroNight}
+      <input type="radio" name="timespan" id="tsDaytime" />${timeModuleLblAstroDay}&nbsp;<input type="text" id="tsDaytimeOffset" size="3" />&nbsp;min,&nbsp;${timeModuleLblAstroDayTill}&nbsp;<input type="text" id="tsDaytimeDuration" size="3" />&nbsp;min<br />
+      <input type="radio" name="timespan" id="tsNighttime" />${timeModuleLblAstroNight}&nbsp;<input type="text" id="tsNighttimeOffset" size="3" />&nbsp;min,&nbsp;${timeModuleLblAstroNightTill}&nbsp;<input type="text" id="tsNighttimeDuration" size="3" />&nbsp;min
     </td>
-    <td></td>
     </tr>
     
     <tr class="CLASS05107">
@@ -538,8 +537,8 @@
     tm.begin    = "";
     tm.calcount = 0;
     tm.end      = "0";
-    tm.sot      = 0;
-    
+    tm.sot      = "sotNone";
+
     if( $("tmRange").checked )
     {
       if( $("tsRange").checked )
@@ -624,12 +623,42 @@
           tm.caldur = secEnd - secStart;
         }
       }
-      if ($("tsDay").checked) {  }
-      if ($("tsDaytime").checked) {
-        tm.sot = 3; // ESP-Konstante: sotAfterSunrise
-      }
-      if ($("tsNighttime").checked) {
-        tm.sot = 6; // ESP-Konstante: sotAfterSunset
+      else if ($("tsDay").checked) {  }
+      else if ($("tsDaytime").checked) {
+        tm.time = parseInt($("tsDaytimeOffset").value,10);
+        if(isNaN(tm.time)) {
+          tm.time = 0;
+        }
+        if (tm.time < 0) {
+          tm.sot = "sotBeforeSunrise";
+          tm.time = -tm.time;
+        } else {
+          tm.sot = "sotAfterSunrise";
+        }
+        tm.caldur = parseInt($("tsDaytimeDuration").value,10);
+        if(isNaN(tm.caldur) || tm.caldur < 0) {
+          tm.caldur = 0;
+        }
+        tm.time *= 60
+        tm.caldur *= 60
+      }
+      else if ($("tsNighttime").checked) {
+        tm.time = parseInt($("tsNighttimeOffset").value,10);
+        if(isNaN(tm.time)) {
+          tm.time = 0;
+        }
+        if (tm.time < 0) {
+          tm.sot = "sotBeforeSunset";
+          tm.time = -tm.time;
+        } else {
+          tm.sot = "sotAfterSunset";
+        }
+        tm.caldur = parseInt($("tsNighttimeDuration").value,10);
+        if(isNaN(tm.caldur) || tm.caldur < 0) {
+          tm.caldur = 0;
+        }
+        tm.time *= 60
+        tm.caldur *= 60
       }
     }
     if( $("tmPoint").checked )
@@ -959,7 +988,11 @@
     $("btnRangeEnd").disabled = bDisabled;
     $("tsDay").disabled = bDisabled;
     $("tsDaytime").disabled = bDisabled;
+    $("tsDaytimeOffset").disabled = bDisabled;
+    $("tsDaytimeDuration").disabled = bDisabled;
     $("tsNighttime").disabled = bDisabled;
+    $("tsNighttimeOffset").disabled = bDisabled;
+    $("tsNighttimeDuration").disabled = bDisabled;
     $("timebegin").disabled = !bDisabled;
     $("btntimebegin").disabled = !bDisabled;
   };
@@ -986,13 +1019,30 @@
           }
         }
       }
-      else {
-        if (tmObj.SunOffsetType() == sotAfterSunrise) {
-          WriteLine("$('tsDaytime').checked = true;");
-        }
-        if (tmObj.SunOffsetType() == sotAfterSunset) {
-          WriteLine("$('tsNighttime').checked = true;");
-        }
+      elseif (tmObj.SunOffsetType() == sotSunrise) {
+        WriteLine("$('tsDaytime').checked = true;");
+        WriteLine("$('tsDaytimeOffset').value = '';");
+        WriteLine("$('tsDaytimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
+      } elseif (tmObj.SunOffsetType() == sotBeforeSunrise) {
+        WriteLine("$('tsDaytime').checked = true;");
+        WriteLine("$('tsDaytimeOffset').value = '-"#(tmObj.TimeSeconds()/60)#"';");
+        WriteLine("$('tsDaytimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
+      } elseif (tmObj.SunOffsetType() == sotAfterSunrise) {
+        WriteLine("$('tsDaytime').checked = true;");
+        WriteLine("$('tsDaytimeOffset').value = '"#(tmObj.TimeSeconds()/60)#"';");
+        WriteLine("$('tsDaytimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
+      } elseif (tmObj.SunOffsetType() == sotSunset) {
+        WriteLine("$('tsNighttime').checked = true;");
+        WriteLine("$('tsNighttimeOffset').value = '';");
+        WriteLine("$('tsNighttimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
+      } elseif (tmObj.SunOffsetType() == sotBeforeSunset) {
+        WriteLine("$('tsNighttime').checked = true;");
+        WriteLine("$('tsNighttimeOffset').value = '-"#(tmObj.TimeSeconds()/60)#"';");
+        WriteLine("$('tsNighttimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
+      } elseif (tmObj.SunOffsetType() == sotAfterSunset) {
+        WriteLine("$('tsNighttime').checked = true;");
+        WriteLine("$('tsNighttimeOffset').value = '"#(tmObj.TimeSeconds()/60)#"';");
+        WriteLine("$('tsNighttimeDuration').value = '"#(tmObj.CalDuration()/60)#"';");
       }
     
       string sCalRep = tmObj.CalRepeatTime();  
--- occu/WebUI/www/webui/js/lang/de/translate.lang.js.orig
+++ occu/WebUI/www/webui/js/lang/de/translate.lang.js
@@ -845,8 +845,10 @@
     "timeModuleLblStart" : "Beginn:",
     "timeModuleLblEnd" : "Ende:",
     "timeModuleLblAllDay" : "Ganzt%E4gig",
-    "timeModuleLblAstroDay" : "Astrofunktion tags%FCber",
-    "timeModuleLblAstroNight" : "Astrofunktion nachts",
+    "timeModuleLblAstroDay" : "Von Sonnenaufgang, versetzt um",
+    "timeModuleLblAstroDayTill" : "bis Sonnenuntergang, oder f%FCr",
+    "timeModuleLblAstroNight" : "Von Sonnenuntergang, versetzt um",
+    "timeModuleLblAstroNightTill" : "bis Sonnenaufgang, oder f%FCr",
     "timeModuleLblPointOfTime" : "Zeitpunkt",
     "timeModuleLblSerialPatternTitle" : "Serienmuster",
     "timeModuleLblSerialPatternOnce" : "Einmalig",
--- occu/WebUI/www/webui/js/lang/en/translate.lang.js.orig
+++ occu/WebUI/www/webui/js/lang/en/translate.lang.js
@@ -891,8 +891,10 @@
     "timeModuleLblStart" : "Beginning:",
     "timeModuleLblEnd" : "End:",
     "timeModuleLblAllDay" : "All-day",
-    "timeModuleLblAstroDay" : "Astro function day",
-    "timeModuleLblAstroNight" : "Astro function night",
+    "timeModuleLblAstroDay" : "From sunrise, shifted by",
+    "timeModuleLblAstroDayTill" : "until sunset or for",
+    "timeModuleLblAstroNight" : "From sunset, shifted by",
+    "timeModuleLblAstroNightTill" : "until sunrise or for",
     "timeModuleLblPointOfTime" : "Time",
 
     "timeModuleLblSerialPatternTitle" : "Serial pattern",
