diff -ruN uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c
--- uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-19 15:31:48.054507491 +0200
+++ uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-19 15:31:59.126695845 +0200
@@ -152,18 +152,67 @@
 	return rk3288_board_late_init();
 }
 
+/*
+*
+* usb current limit : GPIO6_A6 (H:unlock, L:lock)
+*
+*/
+void usb_current_limit_ctrl(bool unlock_current)
+{
+ int tmp;
+
+ tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+ if(unlock_current == true)
+   writel(tmp | 0x40, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+ else
+   writel(tmp & ~0x40, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+
+ tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+ writel(tmp | 0x40, RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+}
+
+/*
+*
+* eMMC maskrom mode : GPIO6_A7 (H:disable maskrom, L:enable maskrom)
+*
+*/
+void rk3288_maskrom_ctrl(bool enable_emmc)
+{
+ int tmp;
+
+ tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+ if(enable_emmc == true)
+   writel(tmp | 0x80, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+ else
+   writel(tmp & ~0x80, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+
+ tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+ writel(tmp | 0x80, RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+ mdelay(10);
+}
+
+/*
+*
+* project id        : GPIO2_A3 GPIO2_A2 GPIO2_A1
+* pcb id            : GPIO2_B2 GPIO2_B1 GPIO2_B0
+* SDP/CDP           : GPIO6_A5 (H:SDP, L:CDP)
+* usb current limit : GPIO6_A6 (H:unlock, L:lock)
+* eMMC maskrom mode : GPIO6_A7 (H:disable maskrom, L:enable maskrom)
+*
+* Please check TRM V1.2 part1 page 152 for the following register settings
+*
+*/
 int check_force_enter_ums_mode(void)
 {
  int tmp;
  enum pcb_id pcbid;
  enum project_id projectid;
 
- // GPIO2_A1/GPIO2_A2/GPIO2_A3 pull up enable
- // please check TRM V1.2 part1 page 152
+ // GPIO2_A3/GPIO2_A2/GPIO2_A1 pull up enable
  tmp = readl(RKIO_GRF_PHYS + GRF_GPIO2A_P);
  writel((tmp&~(0x03F<<2)) | 0x3F<<(16 + 2) | 0x15<<2, RKIO_GRF_PHYS + GRF_GPIO2A_P);
 
- // GPIO2_A1/GPIO2_A2/GPIO2_A3/GPIO2_B0/GPIO2_B1/GPIO2_B2 set to input
+ // GPIO2_A3/GPIO2_A2/GPIO2_A1/GPIO2_B2/GPIO2_B1/GPIO2_B0 set to input
  tmp = readl(RKIO_GPIO2_PHYS + GPIO_SWPORT_DDR);
  writel(tmp & ~(0x70E), RKIO_GPIO2_PHYS + GPIO_SWPORT_DDR);
 
@@ -177,10 +226,10 @@
 
  mdelay(10);
 
- // read GPIO2_A1/GPIO2_A2/GPIO2_A3 value
+ // read GPIO2_A3/GPIO2_A2/GPIO2_A1 value
  projectid = (readl(RKIO_GPIO2_PHYS + GPIO_EXT_PORT) & 0x0E) >>1;
 
- // read GPIO2_B0/GPIO2_B1/GPIO2_B2 value
+ // read GPIO2_B2/GPIO2_B1/GPIO2_B0 value
  pcbid = (readl(RKIO_GPIO2_PHYS + GPIO_EXT_PORT) & 0x700) >> 8;
 
  // only Tinker Board S and the PR stage PCB has this function
@@ -190,12 +239,10 @@
      // SDP detected, enable EMMC and unlock usb current limit
      printf("usb connected to SDP, force enter ums mode\n");
      force_ums = true;
-     // unlock usb current limit and re-enable EMMC
-     // set GPIO6_A6, GPIO6_A7 to high
-     tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
-     writel(tmp | 0xc0, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
-     tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
-     writel(tmp | 0xc0, RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+     rk3288_maskrom_ctrl(true);
+     usb_current_limit_ctrl(true);
+   } else {
+     usb_current_limit_ctrl(false);
    }
  }
  return 0;
diff -ruN uboot-2020.10.orig/arch/arm/mach-rockchip/spl.c uboot-2020.10/arch/arm/mach-rockchip/spl.c
--- uboot-2020.10.orig/arch/arm/mach-rockchip/spl.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/arch/arm/mach-rockchip/spl.c	2020-10-19 15:32:27.039170694 +0200
@@ -125,6 +125,7 @@
 
 	board_early_init_f();
 
+  usb_current_limit_ctrl(true);
 	ret = spl_early_init();
 	if (ret) {
 		printf("spl_early_init() failed: %d\n", ret);
