var xnm=xnm||{};xnm.aio=xnm.aio||{};xnm.aio.webhook=xnm.aio.webhook||{};xnm.aio.webhook.SERVER="wss://mediola-samsung.eu-central-1.elasticbeanstalk.com/notification";
xnm.aio.webhook.Hook=function(){var c=function(a){this._logger="undefined"==typeof require||null==require?{log:function(){}}:require("x.logger.js").getLogger("xnm.aio.webhook.Hook");this._serverURL=a;this._subscriptions=[];this._handlers={};this._running=!1;this._connectionTO=this._wssocket=this._reConnectTO=null};c.prototype.start=function(a){this._running&&a&&a();this._running=!0;var b=this;this._connect(function(a){a?b._reconnect():b._regist()});a&&a()};c.prototype.stop=function(a){this._running||
a&&a();this._running=!1;this._reConnectTO&&clearTimeout(this._reConnectTO);this._connectionTO&&clearTimeout(this._connectionTO);this._wssocket&&(this._wssocket.close(),this._wssocket=null)};c.prototype.addHandler=function(a,b){a&&b&&(this._handlers[a]=b)};c.prototype.subscribe=function(a,b,e){if(b)if(a=this._handlers[a])if(a.isUniqueSubscribe){for(var d=[],c=0;c<b.length;c++){var g=b[c];a.isUniqueSubscribe(g,this._subscriptions)&&(d.push(g),this._subscriptions.push(g))}this._logger.log("trace","hook subscribe"+
JSON.stringify(d));this._wssocket&&this._wssocket.sendJSON({subscriptions:d});e&&e()}else e&&e(Error("no handler has (isUniqueSubscribe) "));else e&&e(Error("no handler for this type"));else e&&e(Error("subscribtions is null"))};c.prototype.unsubscribeAll=function(a){if(this._wssocket){var b=this._subscriptions;this._subscriptions=[];this._wssocket.sendJSON({unsubscriptions:b})}a&&a()};c.prototype.unsubscribeType=function(a,b){if(this._wssocket){for(var c=[],d=[],f=0;f<this._subscriptions.length;f++)this._subscriptions[f]&&
this._subscriptions[f].type==a?c.push(this._subscriptions[f]):d.push(this._subscriptions[f]);this._subscriptions=d;this._wssocket.sendJSON({unsubscriptions:c})}b&&b()};c.prototype._regist=function(a){this._wssocket?(this._wssocket.sendJSON({subscriptions:this._subscriptions}),a&&a()):a&&a(Error("websocket not started"))};c.prototype._connect=function(a){if(this._wssocket)a&&a();else{var b=a,c=require("websocket").createWebSocket(this._serverURL),d=this;c.onclose=function(){d._logger.log("trace","hook closed");
d._wssocket=null;d._reconnect()};c.onerror=function(a){d._logger.log("trace","hook error:"+a);d._wssocket&&d._wssocket.close();d._wssocket=null;b&&(b(Error("hook connection error:"+a)),b=null)};c.onopen=function(){d._logger.log("trace","hook connected");d._connectionTO&&(clearTimeout(d._connectionTO),d._connectionTO=null);d._wssocket=c;b&&(b(),b=null)};c.onmessage=function(a){d._logger.log("trace","hook receive message:");d._logger.log("trace",a);d._onMessage(a)};this._connectionTO||(this._connectionTO=
setTimeout(function(){c.close();d._connectionTO=null;d._wssocket=null;b&&(b(Error("hook connection timeout")),b=null)},2E3));c.open()}};c.prototype._reconnect=function(){if(this._running&&!this._reConnectTO){this._logger.log("trace","try to reconnect hook");var a=this;this._reConnectTO=setTimeout(function(){a._running&&(a._logger.log("trace","reconnect hook"),a._connect(function(b){a._reConnectTO&&(clearTimeout(a._reConnectTO),a._reConnectTO=null);b?a._reconnect():a._regist()}))},5E3)}};c.prototype._onMessage=
function(a){try{if(a=JSON.parse(a),a.constructor===Array)for(var b=0;b<a.length;b++)this._onEvent(a[b]);else this._onEvent(a)}catch(e){}};c.prototype._onEvent=function(a){try{if(a.type&&a.event){var b=this._handlers[a.type];if(b&&b.onNotification)b.onNotification(a.event)}}catch(e){}};return c}();
xnm.aio.webhook.Handler=function(){var c=function(){this._hook=new xnm.aio.webhook.Hook(xnm.aio.webhook.SERVER)};c.prototype.start=function(a){this._hook.start(a)};c.prototype.addHandler=function(a,b){this._hook.addHandler(a,b)};c.prototype.subscribe=function(a,b,c){this._hook.subscribe(a,b,c)};c.prototype.unsubscribeAll=function(a){this._hook.unsubscribeAll(a)};c.prototype.unsubscribeType=function(a,b){this._hook.unsubscribeType(a,b)};return c}();
"undefined"!=typeof module&&null!=module&&(module.exports=new xnm.aio.webhook.Handler);
