var util=require("util"),EventEmitter=require("events"),x=x||{};x.hub=x.hub||{};x.hub.m=x.hub.m||{};x.hub.m.openhab=x.hub.m.openhab||{};x.hub.m.openhab.MODULE=require("xnm.aio.openhab.js");
x.hub.m.openhab.Monitor=function(){var b=function(a){this._logger=require("x.logger.js").getLogger("x.hub.m.openhab.Monitor");this._running=!1;this._server=a;this._devices={};this._reconnectTO=null;this._reconnectTimeout=5E3};b.prototype.start=function(a){this._logger.log("debug","start monitor for:"+this._server.ip);this._running||(this._running=!0,this._listenToEventSource());a&&a()};b.prototype.addStateDevice=function(a,c){a&&a.address&&(this._devices[a.address]=a);c&&c()};b.prototype._listenToEventSource=
function(){this._logger.log("debug","connect to openhab server "+this._server.ip+":"+this._server.port);var a=this;this._startHttpConnection(function(c){a._logger.log("debug","disconnectd from openhab server "+a._server.ip+":"+a._server.port+(c?" with error:"+c.message:""));a._logger.log("debug","reconnect after "+a._reconnectTimeout+" seconds");a._reconnectTO=setTimeout(function(){a._listenToEventSource()},a._reconnectTimeout)})};b.prototype._startHttpConnection=function(a){var c=this,e=!1,b=require("http").request({host:this._server.ip,
port:this._server.port,path:"/rest/events",method:"get"},function(b){b.setEncoding("utf-8");e=!0;c._logger.log("trace","server response with status code:"+b.statusCode);if(200!=b.statusCode)b=Error("http error:"+b.statusCode),a&&(a(b),a=null);else{var d="";b.on("data",function(a){c._logger.log("trace","receive message: "+a);d+=a;if(0<=d.indexOf("\n\n")){a=d.split("\n\n");d="";for(var b=0;b<a.length;b++){var e=a[b].trim().split("\n");e[1]&&"data:"==e[1].substr(0,5)&&c._onMessage(e[1].substr(6).trim())}}else 2E4<
d.length&&(c._logger.log("warn","incoming message string has become too long ("+d.length+"). discarding message."),d="")});b.on("end",function(){c._logger.log("trace","http connection closed")});b.on("close",function(){c._logger.log("trace","http connection closed");a&&(a(),a=null)})}});b.setTimeout(2E3,function(){e||(b.abort(),a&&(a(Error("connection timeout")),a=null))});b.on("error",function(c){a&&(a(c),a=null)});b.end()};b.prototype._onMessage=function(a){try{var c=JSON.parse(a);if(c&&c.type&&
c.topic&&c.payload&&"ItemStateChangedEvent"==c.type){var b=c.topic.split("/")[2];if(b&&this._devices[b]){var d=JSON.parse(c.payload);if(d){var g=this._devices[b],k=this._server._toState(g,{state:d.oldValue}),h=this._server._toState(g,{state:d.value}),f;for(f in h)this._produceEvent(g,f,k[f],h[f])}}}}catch(l){}};b.prototype._produceEvent=function(a,c,b,d){b!=d&&(this._logger.log("trace","receive new status:"+JSON.stringify({address:a.address,key:c,value:d})),require("x.hub.eventbus.js").emit("status",
{module:"openhab",device:a,gateway:a.gateway,data:{key:c,value:d,oldvalue:b,changed:!0}}))};return b}();
x.hub.m.openhab.Handler=function(){var b=function(){this._monitors={}};util.inherits(b,EventEmitter);b.prototype.init=function(a){a&&a()};b.prototype.getSystems=function(){return["openhab"]};b.prototype.addStateDevice=function(a,c){a?a.gateway?this._startMonitor(a.gateway,function(b,d){b?c&&c({error:b}):d.addStateDevice(a,function(a){c&&c({error:a})})}):c&&c(Error("device gateway format invalid")):c&&c({error:Error("device json format invalid")})};b.prototype.getState=function(a,c,b){a?a.gateway?
x.hub.m.openhab.MODULE.doStatus("xhub",a.gateway,a,{value:c},function(a,c){a?b&&b({error:a}):c?b&&b({data:{value:c.status}}):b&&b({error:Error("do status failed")})}):b&&b(Error("device gateway format invalid")):b&&b({error:Error("device json format invalid")})};b.prototype.executeCommand=function(a,b,e){x.hub.m.openhab.MODULE.doCommand(a.gateway,a,b,e)};b.prototype.checkDeviceMatch=function(a,b){return b&&b.device&&a&&a.device&&b.gateway&&a.gateway&&b.gateway.ip==a.gateway.ip?b.device.address==a.device.address:
!1};b.prototype._startMonitor=function(a,b){if(a&&a.ip){var c=a.ip;this._monitors[c]?b&&b(null,this._monitors[c]):(a=x.hub.m.openhab.MODULE.resolveGateway(a))?(a=new x.hub.m.openhab.Monitor(a),this._monitors[c]=a,a.start(),b&&b(null,a)):b&&b(Error("gateway format invalid"))}else b&&b(Error("gateway, format invalid"))};return b}();"undefined"!=typeof exports&&"undefined"!=typeof module&&module.exports&&(exports=module.exports=new x.hub.m.openhab.Handler);
