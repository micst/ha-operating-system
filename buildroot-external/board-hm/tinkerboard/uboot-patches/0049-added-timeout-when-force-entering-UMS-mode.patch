diff -ruN uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c
--- uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-19 15:33:15.255988933 +0200
+++ uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-19 15:35:13.365992573 +0200
@@ -161,6 +161,7 @@
 {
  int tmp;
 
+ printf("%s: unlock_current = %d\n", __func__, unlock_current);
  tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
  if(unlock_current == true)
    writel(tmp | 0x40, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
@@ -180,6 +181,7 @@
 {
  int tmp;
 
+ printf("%s: enable_emmc = %d\n", __func__, enable_emmc);
  tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
  if(enable_emmc == true)
    writel(tmp | 0x80, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
diff -ruN uboot-2020.10.orig/cmd/usb_mass_storage.c uboot-2020.10/cmd/usb_mass_storage.c
--- uboot-2020.10.orig/cmd/usb_mass_storage.c	2020-10-19 15:33:15.259989001 +0200
+++ uboot-2020.10/cmd/usb_mass_storage.c	2020-10-19 15:35:59.882781689 +0200
@@ -218,6 +218,9 @@
 		usb_gadget_handle_interrupts(controller_index);
 
 		rc = fsg_main_thread(NULL);
+    if (rc == -ETIMEDOUT) {
+      goto cleanup_register;
+    }
 		if (rc) {
 			/* Check I/O error */
 			if (rc == -EIO)
diff -ruN uboot-2020.10.orig/common/autoboot.c uboot-2020.10/common/autoboot.c
--- uboot-2020.10.orig/common/autoboot.c	2020-10-19 15:33:15.255988933 +0200
+++ uboot-2020.10/common/autoboot.c	2020-10-19 15:37:22.820188645 +0200
@@ -38,6 +38,7 @@
 static int menukey;
 
 bool force_ums = false;
+bool getdescriptor = false;
 
 #ifdef CONFIG_AUTOBOOT_ENCRYPTION
 #define AUTOBOOT_STOP_STR_SHA256 CONFIG_AUTOBOOT_STOP_STR_SHA256
@@ -376,8 +377,11 @@
     local_args[1]=str2;
     local_args[2]=str3;
     local_args[3]=str4;
-    do_usb_mass_storage(NULL, 0, 4, local_args);
-    return;
+
+    if (do_usb_mass_storage(NULL, 0, 4, local_args) == -ETIMEDOUT) {
+      rk3288_maskrom_ctrl(false);
+      usb_current_limit_ctrl(false);
+    }
   }
 
 	if (stored_bootdelay != -1 && s && !abortboot(stored_bootdelay)) {
diff -ruN uboot-2020.10.orig/drivers/usb/gadget/dwc2_udc_otg_xfer_dma.c uboot-2020.10/drivers/usb/gadget/dwc2_udc_otg_xfer_dma.c
--- uboot-2020.10.orig/drivers/usb/gadget/dwc2_udc_otg_xfer_dma.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/drivers/usb/gadget/dwc2_udc_otg_xfer_dma.c	2020-10-19 15:38:35.485421353 +0200
@@ -1383,6 +1383,7 @@
 			debug_cond(DEBUG_SETUP != 0,
 				   "%s: *** USB_REQ_GET_DESCRIPTOR\n",
 				   __func__);
+      getdescriptor = true;
 			break;
 
 		case USB_REQ_SET_INTERFACE:
diff -ruN uboot-2020.10.orig/drivers/usb/gadget/f_mass_storage.c uboot-2020.10/drivers/usb/gadget/f_mass_storage.c
--- uboot-2020.10.orig/drivers/usb/gadget/f_mass_storage.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/drivers/usb/gadget/f_mass_storage.c	2020-10-19 15:40:17.815157292 +0200
@@ -655,7 +655,7 @@
 static int sleep_thread(struct fsg_common *common)
 {
 	int	rc = 0;
-	int i = 0, k = 0;
+	int i = 0, k = 0, j = 0;
 
 	/* Wait until a signal arrives or we are woken up */
 	for (;;) {
@@ -666,6 +666,7 @@
 			busy_indicator();
 			i = 0;
 			k++;
+      j++;
 		}
 
 		if (k == 10) {
@@ -680,6 +681,13 @@
 			k = 0;
 		}
 
+    if (j == 300) {  //about 3 seconds
+      if(force_ums && !getdescriptor) {
+        printf("wait for usb get descriptor cmd timeout\n");
+        return -ETIMEDOUT;
+      }
+    }
+
 		usb_gadget_handle_interrupts(controller_index);
 	}
 	common->thread_wakeup_needed = 0;
diff -ruN uboot-2020.10.orig/include/linux/usb/gadget.h uboot-2020.10/include/linux/usb/gadget.h
--- uboot-2020.10.orig/include/linux/usb/gadget.h	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/include/linux/usb/gadget.h	2020-10-19 15:40:55.427795361 +0200
@@ -25,6 +25,9 @@
 
 struct usb_ep;
 
+extern bool force_ums;
+extern bool getdescriptor;
+
 /**
  * struct usb_request - describes one i/o request
  * @buf: Buffer used for data.  Always provide this; some controllers
