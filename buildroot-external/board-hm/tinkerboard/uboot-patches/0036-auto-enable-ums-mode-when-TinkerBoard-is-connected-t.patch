diff -ruN uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c
--- uboot-2020.10.orig/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/arch/arm/mach-rockchip/rk3288/rk3288.c	2020-10-19 14:47:07.164925337 +0200
@@ -21,9 +21,45 @@
 #include <asm/arch-rockchip/qos_rk3288.h>
 #include <asm/arch-rockchip/sdram.h>
 #include <linux/err.h>
+#include <linux/delay.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
+enum project_id {
+ TinkerBoardS = 0,
+ TinkerBoard  = 7,
+};
+
+enum pcb_id {
+ SR,
+ ER,
+ PR,
+};
+
+extern bool force_ums;
+
+/*
+ * RK3288 IO memory map:
+ *
+ */
+#define RKIO_GPIO0_PHYS                 0xFF750000
+#define RKIO_GRF_PHYS                   0xFF770000
+#define RKIO_GPIO1_PHYS                 0xFF780000
+#define RKIO_GPIO2_PHYS                 0xFF790000
+#define RKIO_GPIO3_PHYS                 0xFF7A0000
+#define RKIO_GPIO4_PHYS                 0xFF7B0000
+#define RKIO_GPIO5_PHYS                 0xFF7C0000
+#define RKIO_GPIO6_PHYS                 0xFF7D0000
+
+/* gpio power down/up control */
+#define GRF_GPIO2A_P   0x150
+#define GRF_GPIO6A_P   0x190
+
+/* gpio input/output control */
+#define GPIO_SWPORT_DR   0x00
+#define GPIO_SWPORT_DDR    0x04
+#define GPIO_EXT_PORT    0x50
+
 #define GRF_BASE	0xff770000
 
 const char * const boot_devices[BROM_LAST_BOOTSOURCE + 1] = {
@@ -116,6 +152,55 @@
 	return rk3288_board_late_init();
 }
 
+int check_force_enter_ums_mode(void)
+{
+ int tmp;
+ enum pcb_id pcbid;
+ enum project_id projectid;
+
+ // GPIO2_A1/GPIO2_A2/GPIO2_A3 pull up enable
+ // please check TRM V1.2 part1 page 152
+ tmp = readl(RKIO_GRF_PHYS + GRF_GPIO2A_P);
+ writel((tmp&~(0x03F<<2)) | 0x3F<<(16 + 2) | 0x15<<2, RKIO_GRF_PHYS + GRF_GPIO2A_P);
+
+ // GPIO2_A1/GPIO2_A2/GPIO2_A3/GPIO2_B0/GPIO2_B1/GPIO2_B2 set to input
+ tmp = readl(RKIO_GPIO2_PHYS + GPIO_SWPORT_DDR);
+ writel(tmp & ~(0x70E), RKIO_GPIO2_PHYS + GPIO_SWPORT_DDR);
+
+ // GPIO6_A5 pull up/down disable
+ tmp = readl(RKIO_GRF_PHYS + GRF_GPIO6A_P);
+ writel((tmp&~(0x03<<10)) | 0x03<<(16 + 10), RKIO_GRF_PHYS + GRF_GPIO6A_P);
+
+ // GPIO6_A5 set to input
+ tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+ writel(tmp & ~(0x20), RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+
+ mdelay(10);
+
+ // read GPIO2_A1/GPIO2_A2/GPIO2_A3 value
+ projectid = (readl(RKIO_GPIO2_PHYS + GPIO_EXT_PORT) & 0x0E) >>1;
+
+ // read GPIO2_B0/GPIO2_B1/GPIO2_B2 value
+ pcbid = (readl(RKIO_GPIO2_PHYS + GPIO_EXT_PORT) & 0x700) >> 8;
+
+ // only Tinker Board S and the PR stage PCB has this function
+ if(projectid!=TinkerBoard && pcbid >= ER){
+   printf("PC event = 0x%x\n", readl(RKIO_GPIO6_PHYS + GPIO_EXT_PORT)&0x20);
+   if((readl(RKIO_GPIO6_PHYS + GPIO_EXT_PORT)&0x20)==0x20) {
+     // SDP detected, enable EMMC and unlock usb current limit
+     printf("usb connected to SDP, force enter ums mode\n");
+     force_ums = true;
+     // unlock usb current limit and re-enable EMMC
+     // set GPIO6_A6, GPIO6_A7 to high
+     tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+     writel(tmp | 0xc0, RKIO_GPIO6_PHYS + GPIO_SWPORT_DR);
+     tmp = readl(RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+     writel(tmp | 0xc0, RKIO_GPIO6_PHYS + GPIO_SWPORT_DDR);
+   }
+ }
+ return 0;
+}
+
 static int ft_rk3288w_setup(void *blob)
 {
 	const char *path;
diff -ruN uboot-2020.10.orig/cmd/usb_mass_storage.c uboot-2020.10/cmd/usb_mass_storage.c
--- uboot-2020.10.orig/cmd/usb_mass_storage.c	2020-10-19 14:45:18.063093784 +0200
+++ uboot-2020.10/cmd/usb_mass_storage.c	2020-10-19 14:46:14.764045648 +0200
@@ -136,7 +136,7 @@
 	return ret;
 }
 
-static int do_usb_mass_storage(struct cmd_tbl *cmdtp, int flag,
+int do_usb_mass_storage(struct cmd_tbl *cmdtp, int flag,
 			       int argc, char *const argv[])
 {
 	const char *usb_controller;
diff -ruN uboot-2020.10.orig/common/autoboot.c uboot-2020.10/common/autoboot.c
--- uboot-2020.10.orig/common/autoboot.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/common/autoboot.c	2020-10-19 14:46:14.764045648 +0200
@@ -37,6 +37,8 @@
 static int stored_bootdelay;
 static int menukey;
 
+bool force_ums = false;
+
 #ifdef CONFIG_AUTOBOOT_ENCRYPTION
 #define AUTOBOOT_STOP_STR_SHA256 CONFIG_AUTOBOOT_STOP_STR_SHA256
 #else
@@ -359,10 +361,25 @@
 	return s;
 }
 
+extern int do_usb_mass_storage(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[]);
+
 void autoboot_command(const char *s)
 {
 	debug("### main_loop: bootcmd=\"%s\"\n", s ? s : "<UNDEFINED>");
 
+  if (force_ums) {
+    // force to enter ums mode
+    char *local_args[4];
+    char str1[]="ums", str2[]="1", str3[]="mmc", str4[]="0";
+
+    local_args[0]=str1;
+    local_args[1]=str2;
+    local_args[2]=str3;
+    local_args[3]=str4;
+    do_usb_mass_storage(NULL, 0, 4, local_args);
+    return;
+  }
+
 	if (stored_bootdelay != -1 && s && !abortboot(stored_bootdelay)) {
 		bool lock;
 		int prev;
diff -ruN uboot-2020.10.orig/common/board_r.c uboot-2020.10/common/board_r.c
--- uboot-2020.10.orig/common/board_r.c	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/common/board_r.c	2020-10-19 14:46:14.764045648 +0200
@@ -780,6 +780,7 @@
 #ifdef CONFIG_CMD_ONENAND
 	initr_onenand,
 #endif
+  check_force_enter_ums_mode,
 #ifdef CONFIG_MMC
 	initr_mmc,
 #endif
diff -ruN uboot-2020.10.orig/include/init.h uboot-2020.10/include/init.h
--- uboot-2020.10.orig/include/init.h	2020-10-05 17:15:32.000000000 +0200
+++ uboot-2020.10/include/init.h	2020-10-19 14:46:14.764045648 +0200
@@ -261,6 +261,7 @@
 /* manipulate the U-Boot fdt before its relocation */
 int board_fix_fdt(void *rw_fdt_blob);
 int board_late_init(void);
+int check_force_enter_ums_mode (void);
 int board_postclk_init(void); /* after clocks/timebase, before env/serial */
 int board_early_init_r(void);
 
