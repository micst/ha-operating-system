#!/bin/sh
#
# Starts HMServer.
#

LOGLEVEL_HMServer=5
CFG_TEMPLATE_DIR=/etc/config_templates
STARTWAITFILE=/var/status/HMServerStarted

[[ -r /var/hm_mode ]] && . /var/hm_mode

# skip this startup if not in normal mode
[[ "${HM_MODE}" != "NORMAL" ]] && exit 0

HM_SERVER=/opt/HMServer/HMIPServer.jar
HM_SERVER_ARGS="/var/etc/crRFD.conf /var/etc/HMServer.conf"
HM_SERVER_DEVNODE=/dev/mmd_hmip
PIDFILE=/var/run/HMIPServer.pid

init() {
  export JAVA_HOME=/opt/java/
  export PATH=${PATH}:${JAVA_HOME}/bin

  if [[ ! -e /etc/config/log4j.xml ]]; then
    cp -a ${CFG_TEMPLATE_DIR}/log4j.xml /etc/config
  fi

  if [[ ! -e /etc/config/hmip_networkkey.conf ]]; then
    if [[ -f ${CFG_TEMPLATE_DIR}/hmip_networkkey.conf ]]; then
      cp -a ${CFG_TEMPLATE_DIR}/hmip_networkkey.conf /etc/config
    fi
  fi

  # lets build HMServer.conf with own diagram path
  sed "s|^diagramDatabasePath=.*$|diagramDatabasePath=/tmp/measurement|" /etc/HMServer.conf >/var/etc/HMServer.conf

  # copy over the diagram measurement data from /media/usb0/measurement to
  # /tmp/measurement so that we have the rrd data to start with
  if [[ -d /media/usb0/measurement ]]; then
    rm -rf /tmp/measurement
    cp -a /media/usb0/measurement /tmp/
  else
    mkdir -p /tmp/measurement
  fi

  if [[ -n "${HM_HMIP_DEV}" ]]; then

    # if no raw uart is used to connect to the rf module (e.g. HmIP-RFUSB)
    # we have to set the device node
    if [[ "${HM_HMIP_DEVNODE}" != "${HM_HMRF_DEVNODE}" ]] ||
       ! echo -n "${HM_HMIP_DEVNODE}" | grep -q raw-uart; then
      HM_SERVER_DEVNODE=${HM_HMIP_DEVNODE}
    else
      HM_SERVER_DEVNODE=/dev/mmd_hmip
    fi

    # make sure the Adapter Port setting is correct
    # when generating /var/etc/crRFD.conf
    sed "s|^Adapter\.1\.Port=/dev/.*$|Adapter.1.Port=${HM_SERVER_DEVNODE}|" ${CFG_TEMPLATE_DIR}/crRFD.conf >/var/etc/crRFD.conf

    # we disable Advanced HmIP Routing (Lan.Routing.Enabled) in crRFD.conf
    # if the used HmIP RF module doesn't support it
    # (which only the RPI-RF-MOD support)
    if [[ "${HM_HMIP_DEV}" != "RPI-RF-MOD" ]]; then
      sed -i "s|^Lan\.Routing\.Enabled=.*$|Lan.Routing.Enabled=false|" /var/etc/crRFD.conf
    fi

  else
    HM_SERVER=/opt/HMServer/HMServer.jar
    HM_SERVER_ARGS="/var/etc/HMServer.conf"
    HM_SERVER_DEVNODE=""
  fi

  # use checkHmIPdevices.sh to find obsolete devices files
  # and move them to a backup folder
  if [[ -x /bin/checkHmIPdevices.sh ]]; then
    /bin/checkHmIPdevices.sh -f
  fi
}

waitStartupComplete() {
  STEPS=150
  for i in $(seq 1 ${STEPS}); do
    sleep 2
    echo -n "."
    if [[ -e ${STARTWAITFILE} ]]; then
      echo "OK"
      break
    fi
    if [[ ${i} -eq ${STEPS} ]]; then
      echo "ERROR"
    fi
  done
}

start() {
  echo -n "Starting HMIPServer: "
  init

  # adjust the oom score (which is inherited by start-stop-daemon)
  # to ensure that others are killed first in case of low memory situations
  echo -900 >/proc/$$/oom_score_adj

  # get the architecture
  ARCH=$(uname -m)

  # if we run on aarch64 we have to override the libNRJavaSerial definition
  # so that the aarch64 (v8) version is used we supply our own
  JAVAOPT=
  if [[ "${ARCH}" == "aarch64" ]];then
    JAVAOPT="-DlibNRJavaSerial.userlib=/opt/HMServer/libNRJavaSerialv8.so"
  fi

  # calculate the maximum used heap size (-Xmx) depending on the
  # total amount of RAM we have (use max. 25%) - use multiple of 128MB
  MAXHEAP=$(free -m | grep Mem: | awk '{print int($2*0.25/128)*128}')
  if [[ -n "${MAXHEAP}" ]] && [[ "${MAXHEAP}" -gt 128 ]]; then
    JAVAOPT="-Xmx${MAXHEAP}m ${JAVAOPT}"
  else
    JAVAOPT="-Xmx128m ${JAVAOPT}"
  fi

  start-stop-daemon -b -S -q -m -p ${PIDFILE} --exec java -- -Dos.arch=${ARCH} ${JAVAOPT} -Dlog4j.configuration=file:///etc/config/log4j.xml -Dfile.encoding=ISO-8859-1 -Dgnu.io.rxtx.SerialPorts=${HM_SERVER_DEVNODE} -jar ${HM_SERVER} ${HM_SERVER_ARGS}
  echo -n "."
  waitStartupComplete
}

stop() {
  echo -n "Stopping HMIPServer: "
  rm -f ${STARTWAITFILE}
  start-stop-daemon -K -q -p ${PIDFILE}
  rm -f ${PIDFILE}

  # copy over the diagram measurement data from /tmp/measurement to a
  # connected usb stick, if present
  if [[ -d /media/usb0/measurement ]]; then
    /usr/bin/rsync -aogX --delete-after --no-whole-file --checksum /tmp/measurement/ /media/usb0/measurement/
  fi

  echo "OK"
}

restart() {
  stop
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
